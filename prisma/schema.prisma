generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  isActive      Boolean
  createdAt     DateTime       @default(now())
  organizations Organization[]
  approved      Boolean        @default(false)
}

model Organization {
  id            Int            @id @default(autoincrement())
  name          String
  email         String         @unique
  password      String
  isActive      Boolean
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       Int
  sales         Sale[]
  collaborators Collaborator[]
  goals         Goal[]
  createdAt     DateTime       @default(now())
  approved      Boolean        @default(false)
  Channel       Channel[]
}

model Sale {
  id             Int          @id @default(autoincrement())
  month          DateTime
  investment     Float
  revenue        Float
  leadsGenerated Int
  salesCount     Int
  productsSold   Int
  channel        Channel      @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId      Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId Int
  createdAt      DateTime     @default(now())
  Goal           Goal[]
}

model Collaborator {
  id                    Int                     @id @default(autoincrement())
  name                  String
  organization          Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId        Int
  data                  DateTime
  createdAt             DateTime                @default(now())
  items                 CollaboratorItem[]
  Goal                  Goal[]
  ChannelToCollaborator ChannelToCollaborator[]
}

model CollaboratorItem {
  id             Int          @id @default(autoincrement())
  leadsGenerated Int
  salesCount     Int
  productsSold   Int
  revenue        Float
  investedAmount Float
  channelId      Int?
  channel        Channel?     @relation(fields: [channelId], references: [id], onDelete: Cascade)
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  collaboratorId Int
  createdAt      DateTime     @default(now())
}

model Goal {
  id               Int           @id @default(autoincrement())
  goalType         GoalType
  valorInvestido   Float
  faturamento      Float
  ledsGerados      Int
  numeroVendas     Int
  produtosVendidos Int
  mesMeta          DateTime
  organization     Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId   Int
  channel          Channel?      @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId        Int?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now()) @updatedAt
  Sale             Sale?         @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId           Int?
  Collaborator     Collaborator? @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  collaboratorId   Int?
}

enum GoalType {
  COLLABORATOR
  SALES
}

model Channel {
  id                    Int                     @id @default(autoincrement())
  name                  String
  organization          Organization            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId        Int
  ChannelToCollaborator ChannelToCollaborator[]
  CollaboratorItem      CollaboratorItem[]
  Goal                  Goal[]
  Sale                  Sale[]
}

model ChannelToCollaborator {
  id             Int          @id @default(autoincrement())
  month          DateTime
  leadsGenerated Int
  salesCount     Int
  productsSold   Int
  revenue        Float
  channel        Channel      @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId      Int
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id], onDelete: Cascade)
  collaboratorId Int
  createdAt      DateTime     @default(now())
}
